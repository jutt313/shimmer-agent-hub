
import React from 'react';
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowRight, Bot, Zap, Shield, Clock, CheckCircle, XCircle, AlertCircle } from 'lucide-react';
import { YusrAIStructuredResponse } from "@/utils/jsonParser";

interface ExecutionBlueprintVisualizerProps {
  blueprint: YusrAIStructuredResponse['execution_blueprint'];
  isVisible?: boolean;
}

const ExecutionBlueprintVisualizer: React.FC<ExecutionBlueprintVisualizerProps> = ({ 
  blueprint, 
  isVisible = true 
}) => {
  if (!isVisible || !blueprint) {
    return (
      <div className="flex items-center justify-center p-8 bg-gray-50 rounded-3xl border border-gray-200">
        <div className="text-center space-y-4">
          <Zap className="w-12 h-12 mx-auto text-gray-400" />
          <p className="text-gray-500">Execution blueprint will appear here after AI processing</p>
        </div>
      </div>
    );
  }

  const getStepIcon = (step: any) => {
    const action = step.action?.toLowerCase() || '';
    if (action.includes('ai') || action.includes('agent')) return Bot;
    if (action.includes('trigger')) return Zap;
    if (action.includes('validate') || action.includes('check')) return CheckCircle;
    if (action.includes('error') || action.includes('fail')) return XCircle;
    return ArrowRight;
  };

  const getStepColor = (step: any) => {
    const action = step.action?.toLowerCase() || '';
    if (action.includes('ai') || action.includes('agent')) return 'bg-purple-100 text-purple-700 border-purple-300';
    if (action.includes('trigger')) return 'bg-yellow-100 text-yellow-700 border-yellow-300';
    if (action.includes('validate') || action.includes('check')) return 'bg-green-100 text-green-700 border-green-300';
    if (action.includes('error') || action.includes('fail')) return 'bg-red-100 text-red-700 border-red-300';
    return 'bg-blue-100 text-blue-700 border-blue-300';
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-200/50">
        <h3 className="text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2">
          <Zap className="w-6 h-6 text-blue-600" />
          Execution Blueprint
        </h3>
        <p className="text-gray-600">
          Dynamic execution plan generated by AI for your automation workflow
        </p>
      </div>

      {/* Trigger Section */}
      <Card className="rounded-2xl border border-gray-200 shadow-sm">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Zap className="w-5 h-5 text-yellow-500" />
            Trigger Configuration
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-3 p-4 bg-yellow-50 rounded-xl border border-yellow-200">
            <Badge variant="outline" className="bg-yellow-100 text-yellow-700 border-yellow-300">
              {blueprint.trigger?.type || 'manual'}
            </Badge>
            <span className="text-sm text-gray-700">
              {blueprint.trigger?.type === 'manual' && 'Manually triggered by user'}
              {blueprint.trigger?.type === 'webhook' && 'Triggered by incoming webhook'}
              {blueprint.trigger?.type === 'schedule' && 'Triggered on schedule'}
              {blueprint.trigger?.type === 'event' && 'Triggered by platform event'}
              {!blueprint.trigger?.type && 'Manual trigger - initiated by user action'}
            </span>
          </div>
        </CardContent>
      </Card>

      {/* Workflow Steps */}
      <Card className="rounded-2xl border border-gray-200 shadow-sm">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-lg">
            <ArrowRight className="w-5 h-5 text-blue-500" />
            Workflow Steps ({blueprint.workflow?.length || 0})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {blueprint.workflow && blueprint.workflow.length > 0 ? (
              blueprint.workflow.map((step, index) => {
                const StepIcon = getStepIcon(step);
                const stepColor = getStepColor(step);
                
                return (
                  <div key={index} className="relative">
                    <div className={`flex items-start gap-4 p-4 rounded-xl border ${stepColor}`}>
                      <div className="flex-shrink-0 w-8 h-8 bg-white rounded-full flex items-center justify-center text-sm font-bold border-2 border-current">
                        {step.step || index + 1}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <StepIcon className="w-4 h-4" />
                          <h4 className="font-semibold">{step.action || `Step ${index + 1}`}</h4>
                          {step.platform && (
                            <Badge variant="secondary" className="text-xs">{step.platform}</Badge>
                          )}
                          {step.method && (
                            <Badge variant="outline" className="text-xs">{step.method}</Badge>
                          )}
                        </div>
                        
                        {step.description && (
                          <p className="text-sm mb-2 opacity-90">{step.description}</p>
                        )}
                        
                        {step.endpoint && (
                          <div className="text-xs font-mono bg-white/50 p-2 rounded border">
                            <span className="font-semibold">{step.method || 'GET'}</span> {step.endpoint}
                          </div>
                        )}
                        
                        {step.ai_agent_integration && (
                          <div className="flex items-center gap-2 mt-2 p-2 bg-purple-50 rounded border border-purple-200">
                            <Bot className="w-4 h-4 text-purple-500" />
                            <span className="text-sm text-purple-700">
                              AI Agent: {step.ai_agent_integration.agent_name || 'Dynamic Agent'}
                            </span>
                          </div>
                        )}
                        
                        {step.error_handling && (
                          <div className="mt-2 text-xs text-gray-600 bg-white/50 p-2 rounded">
                            <span className="font-medium">Error Handling:</span> {step.error_handling.retry_attempts || 3} retries, 
                            fallback: {step.error_handling.fallback_action || 'log and continue'}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    {index < (blueprint.workflow?.length || 0) - 1 && (
                      <div className="flex justify-center my-2">
                        <ArrowRight className="w-4 h-4 text-gray-400" />
                      </div>
                    )}
                  </div>
                );
              })
            ) : (
              <div className="text-center py-8 text-gray-500">
                <ArrowRight className="w-8 h-8 mx-auto mb-2 opacity-50" />
                <p>No workflow steps defined yet</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Error Handling */}
      <Card className="rounded-2xl border border-gray-200 shadow-sm">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Shield className="w-5 h-5 text-red-500" />
            Error Handling & Recovery
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 bg-red-50 rounded-xl border border-red-200">
              <h4 className="font-semibold text-red-900 mb-2 flex items-center gap-2">
                <AlertCircle className="w-4 h-4" />
                Retry Strategy
              </h4>
              <p className="text-sm text-red-700">
                {blueprint.error_handling?.retry_attempts || 3} retry attempts before failure
              </p>
            </div>
            
            <div className="p-4 bg-orange-50 rounded-xl border border-orange-200">
              <h4 className="font-semibold text-orange-900 mb-2">Fallback Actions</h4>
              <div className="flex flex-wrap gap-1">
                {blueprint.error_handling?.fallback_actions?.map((action, index) => (
                  <Badge key={index} variant="outline" className="text-xs bg-orange-100 text-orange-700">
                    {action}
                  </Badge>
                )) || (
                  <Badge variant="outline" className="text-xs bg-orange-100 text-orange-700">
                    Log and continue
                  </Badge>
                )}
              </div>
            </div>
            
            <div className="p-4 bg-red-50 rounded-xl border border-red-200 md:col-span-2">
              <h4 className="font-semibold text-red-900 mb-2">Critical Failures</h4>
              <div className="flex flex-wrap gap-1">
                {blueprint.error_handling?.critical_failure_actions?.map((action, index) => (
                  <Badge key={index} variant="destructive" className="text-xs">
                    {action}
                  </Badge>
                )) || (
                  <Badge variant="destructive" className="text-xs">
                    Stop execution and notify user
                  </Badge>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Performance Optimization */}
      <Card className="rounded-2xl border border-gray-200 shadow-sm">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Clock className="w-5 h-5 text-green-500" />
            Performance Optimization
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-green-50 rounded-xl border border-green-200">
              <h4 className="font-semibold text-green-900 mb-1">Rate Limiting</h4>
              <p className="text-sm text-green-700">
                {blueprint.performance_optimization?.rate_limit_handling || 'Automatic rate limit detection'}
              </p>
            </div>
            
            <div className="p-4 bg-blue-50 rounded-xl border border-blue-200">
              <h4 className="font-semibold text-blue-900 mb-1">Concurrency</h4>
              <p className="text-sm text-blue-700">
                {blueprint.performance_optimization?.concurrency_limit || 5} parallel tasks
              </p>
            </div>
            
            <div className="p-4 bg-purple-50 rounded-xl border border-purple-200">
              <h4 className="font-semibold text-purple-900 mb-1">Timeout</h4>
              <p className="text-sm text-purple-700">
                {blueprint.performance_optimization?.timeout_seconds_per_step || 30}s per step
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Status Footer */}
      <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-4 border border-green-200/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-600" />
            <span className="font-medium text-green-900">Blueprint Ready</span>
          </div>
          <div className="text-sm text-green-700">
            {blueprint.workflow?.length || 0} steps • AI-generated execution plan
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExecutionBlueprintVisualizer;
