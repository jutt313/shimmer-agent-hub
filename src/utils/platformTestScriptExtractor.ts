
import { DataFlowValidator } from './dataFlowValidator';

/**
 * Platform Test Script Extractor - PRIORITY SYSTEM for ChatAI test data
 * 1. ChatAI test_payloads (highest priority)
 * 2. ChatAI testConfig (medium priority)  
 * 3. Intelligent fallback (lowest priority)
 */

export function extractTestScript(platform: any, credentials: Record<string, string>): string {
  console.log('ðŸ”§ Extracting test script with PRIORITY SYSTEM for:', platform?.name);
  
  // Validate platform data first
  const validation = DataFlowValidator.validatePlatformForCredentialForm(platform);
  if (!validation.isValid) {
    console.warn('Platform validation issues:', validation.issues);
  }

  const platformName = platform?.name || 'Unknown Platform';
  
  // PRIORITY 1: ChatAI test_payloads (HIGHEST PRIORITY)
  if (platform.test_payloads && Array.isArray(platform.test_payloads) && platform.test_payloads.length > 0) {
    console.log('ðŸŽ¯ PRIORITY 1: Using ChatAI test_payloads');
    
    const testPayload = platform.test_payloads[0];
    const script = {
      platform: platformName,
      source: "ChatAI Generated Test Payload (Priority 1)",
      priority: "HIGHEST - ChatAI test_payloads",
      test_payload: testPayload,
      credentials_needed: Object.keys(credentials),
      note: "This test payload was generated by ChatAI specifically for this platform"
    };

    DataFlowValidator.logDataTransformation(
      'Test Script Generation',
      { platform: platformName, test_payloads: platform.test_payloads.length },
      script,
      'ChatAI test_payloads to test script'
    );

    return JSON.stringify(script, null, 2);
  }

  // PRIORITY 2: ChatAI testConfig (MEDIUM PRIORITY)
  if (platform.testConfig && typeof platform.testConfig === 'object') {
    console.log('ðŸŽ¯ PRIORITY 2: Using ChatAI testConfig');
    
    const script = {
      platform: platformName,
      source: "ChatAI Test Configuration (Priority 2)",
      priority: "MEDIUM - ChatAI testConfig",
      test_config: platform.testConfig,
      credentials_needed: Object.keys(credentials),
      note: "This test configuration was provided by ChatAI for platform connectivity testing"
    };

    DataFlowValidator.logDataTransformation(
      'Test Script Generation',
      { platform: platformName, testConfig: true },
      script,
      'ChatAI testConfig to test script'
    );

    return JSON.stringify(script, null, 2);
  }

  // PRIORITY 3: Intelligent fallback (LOWEST PRIORITY)
  console.log('ðŸŽ¯ PRIORITY 3: Using intelligent fallback (no ChatAI data available)');
  
  const fallbackScript = {
    platform: platformName,
    source: "Intelligent Platform Detection (Priority 3)",
    priority: "LOWEST - Intelligent fallback",
    base_url: generateIntelligentBaseUrl(platformName),
    test_endpoint: generateIntelligentEndpoint(platformName),
    method: "GET",
    headers: {
      "Authorization": "Bearer {api_key}",
      "Content-Type": "application/json",
      "User-Agent": "YusrAI-Platform-Tester/3.0"
    },
    credentials_needed: Object.keys(credentials),
    note: "ChatAI test data not available - using intelligent platform detection",
    warning: "This is a fallback. For better results, ensure ChatAI provides test_payloads or testConfig"
  };

  DataFlowValidator.logDataTransformation(
    'Test Script Generation',
    { platform: platformName, no_chatai_data: true },
    fallbackScript,
    'Intelligent fallback generation'
  );

  return JSON.stringify(fallbackScript, null, 2);
}

// Helper functions for intelligent fallback
function generateIntelligentBaseUrl(platformName: string): string {
  const cleanPlatform = platformName.toLowerCase().replace(/\s+/g, '');
  
  // Known platform mappings
  const knownMappings: Record<string, string> = {
    'elevenlabs': 'https://api.elevenlabs.io',
    '11labs': 'https://api.elevenlabs.io',
    'openai': 'https://api.openai.com',
    'slack': 'https://slack.com/api',
    'notion': 'https://api.notion.com',
    'github': 'https://api.github.com',
    'typeform': 'https://api.typeform.com',
    'googlesheets': 'https://sheets.googleapis.com'
  };

  if (knownMappings[cleanPlatform]) {
    return knownMappings[cleanPlatform];
  }

  // Smart TLD detection
  if (cleanPlatform.includes('.io')) {
    const domain = cleanPlatform.replace(/\.io.*/, '');
    return `https://api.${domain}.io`;
  }
  
  if (cleanPlatform.includes('.ai')) {
    const domain = cleanPlatform.replace(/\.ai.*/, '');
    return `https://api.${domain}.ai`;
  }
  
  return `https://api.${cleanPlatform}.com`;
}

function generateIntelligentEndpoint(platformName: string): string {
  const cleanPlatform = platformName.toLowerCase();
  
  const knownEndpoints: Record<string, string> = {
    'elevenlabs': '/v1/user',
    '11labs': '/v1/user',
    'openai': '/v1/models',
    'slack': '/auth.test',
    'notion': '/v1/users/me',
    'github': '/user',
    'typeform': '/me'
  };

  return knownEndpoints[cleanPlatform] || '/me';
}

export function injectCredentials(script: string, credentials: Record<string, string>): string {
  if (!script || !credentials) {
    return script;
  }

  let injectedScript = script;
  
  // Inject credentials into script placeholders
  Object.entries(credentials).forEach(([key, value]) => {
    if (value && value !== 'â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢') {
      const pattern = new RegExp(`\\{${key}\\}`, 'g');
      injectedScript = injectedScript.replace(pattern, value);
    }
  });

  // Log the credential injection
  DataFlowValidator.logDataTransformation(
    'Credential Injection',
    { credentials: Object.keys(credentials) },
    { script_length: injectedScript.length },
    'Inject credentials into test script'
  );

  return injectedScript;
}

export function formatExecutableScript(script: string): string {
  try {
    // Try to parse and reformat for better display
    const parsed = JSON.parse(script);
    return JSON.stringify(parsed, null, 2);
  } catch {
    // Return as-is if not JSON
    return script;
  }
}

console.log('âœ… Platform Test Script Extractor loaded with PRIORITY SYSTEM for ChatAI data');
